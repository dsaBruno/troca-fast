generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  fullname      String
  email         String         @unique
  password_hash String
  type          String
  is_active     Boolean
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  logsProtocol  LogsProtocol[]
  logsRequest   LogsRequest[]

  @@map("users")
}

model Reason {
  id         String    @id @default(uuid())
  title      String
  slug       String    @db.VarChar(80)
  action     String    @db.VarChar(80)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  product    Product[]

  @@unique([action, slug])
  @@map("reasons")
}

model Status {
  id           String         @id @default(uuid())
  title        String
  slug         String         @db.VarChar(80)
  group        String         @db.VarChar(80)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  logsProtocol LogsProtocol[]
  logsRequest  LogsRequest[]
  protocol     Protocol[]
  request      Request[]

  @@unique([group, slug])
  @@map("status")
}

model Request {
  id                    String              @id @default(uuid())
  sequencial            Int                 @unique @default(autoincrement())
  shipping_method       String
  requester             String
  order_id              String
  order_id_idw          String?
  order_id_return       String?
  nfe                   String?
  nfd                   String?
  order_date            DateTime
  order_freight_value   Float?
  order_value           Float
  order_gift_card       Float?
  client_name           String
  client_document       String
  client_email          String
  client_uf             String
  client_zipcode        String
  client_address        String
  client_address_number String
  client_telephone      String
  client_state          String
  postage_code          String?
  voucher               Boolean
  status_id             String
  without_postage_code  Boolean             @default(false)
  created_at            DateTime            @default(now())
  updated_at            DateTime            @default(now()) @updatedAt
  LogsEmails            LogsEmails[]
  LogsRequest           LogsRequest[]
  ProductNotOrdered     ProductNotOrdered[]
  protocol              Protocol[]
  status                Status              @relation(fields: [status_id], references: [id], onDelete: Cascade)

  @@index([status_id], map: "requests_status_id_fkey")
  @@map("requests")
}

model Protocol {
  id            String         @id @default(uuid())
  sequencial    Int            @unique @default(autoincrement())
  action        String
  freight_value Float?
  total         Float
  bank          String?
  agency        String?
  account       String?
  digit_account String?
  type_key_pix  String?
  key_pix       String?
  voucher       Boolean?
  return_vtex   Boolean?
  request_id    String
  status_id     String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  logsProtocol  LogsProtocol[]
  product       Product[]
  request       Request        @relation(fields: [request_id], references: [id], onDelete: Cascade)
  status        Status         @relation(fields: [status_id], references: [id])

  @@index([request_id], map: "protocols_request_id_fkey")
  @@index([status_id], map: "protocols_status_id_fkey")
  @@map("protocols")
}

model Product {
  id                     String         @id @default(uuid())
  name                   String
  value                  Float
  quantity               Int
  refId                  String
  image                  String
  ean                    String
  category               String
  brand                  String
  description_request    String         @db.LongText
  approved               Boolean?
  reason_id              String
  protocol_id            String
  created_at             DateTime       @default(now())
  updated_at             DateTime       @default(now()) @updatedAt
  reason_refused_product String?        @db.LongText
  productImage           ProductImage[]
  protocol               Protocol       @relation(fields: [protocol_id], references: [id])
  reason                 Reason         @relation(fields: [reason_id], references: [id])

  @@index([protocol_id], map: "products_protocol_id_fkey")
  @@index([reason_id], map: "products_reason_id_fkey")
  @@map("products")
}

model ProductImage {
  id         String   @id @default(uuid())
  url_image  String
  product_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])

  @@index([product_id], map: "product_image_product_id_fkey")
  @@map("product_image")
}

model LogsRequest {
  id         String   @id @default(uuid())
  user_id    String?
  request_id String
  status_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  request    Request  @relation(fields: [request_id], references: [id])
  status     Status   @relation(fields: [status_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([request_id], map: "logs_request_request_id_fkey")
  @@index([status_id], map: "logs_request_status_id_fkey")
  @@index([user_id], map: "logs_request_user_id_fkey")
  @@map("logs_request")
}

model LogsProtocol {
  id          String   @id @default(uuid())
  user_id     String?
  protocol_id String
  status_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  protocol    Protocol @relation(fields: [protocol_id], references: [id])
  status      Status   @relation(fields: [status_id], references: [id])
  user        User?    @relation(fields: [user_id], references: [id])

  @@index([protocol_id], map: "logs_protocol_protocol_id_fkey")
  @@index([status_id], map: "logs_protocol_status_id_fkey")
  @@index([user_id], map: "logs_protocol_user_id_fkey")
  @@map("logs_protocol")
}

model ProductNotOrdered {
  id         String   @id @default(uuid())
  refId      String?
  ean        String?
  quantity   Int
  merged     Boolean  @default(false)
  request_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  request    Request  @relation(fields: [request_id], references: [id])

  @@index([request_id], map: "product_not_ordered_request_id_fkey")
  @@map("product_not_ordered")
}

model LogsEmails {
  id         String   @id @default(uuid())
  email      String
  request_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  request    Request  @relation(fields: [request_id], references: [id])

  @@index([request_id], map: "logs_emails_request_id_fkey")
  @@map("logs_emails")
}
